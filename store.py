# *Дополнительное задание:
# Ты разрабатываешь программное обеспечение для сети магазинов. Каждый магазин в этой сети
# имеет свои особенности, но также существуют общие характеристики, такие как адрес, название и ассортимент товаров.
# Ваша задача — создать класс Store, который можно будет использовать для создания различных магазинов.
# Шаги: 1.
# Создай класс Store: -Атрибуты класса: name: название магазина. address: адрес магазина. items: словарь, где ключ -
# название товара, а значение - его цена. Например, {'apples': 0.5, 'bananas': 0.75}. Методы класса: __init__ -
# конструктор, который инициализирует название и адрес, а также пустой словарь для items`. -  метод для добавления
# товара в ассортимент. метод для удаления товара из ассортимента. метод для получения цены товара по его названию.
# Если товар отсутствует, возвращайте None. метод для обновления цены товара. 2. Создай несколько объектов класса
# Store: Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько
# товаров. 3. Протестировать методы: Выбери один из созданных магазинов и протестируй все его методы: добавь товар,
# обнови цену, убери товар и запрашивай цену. В поле для ответа загрузи ссылку на GitHub-репозиторий, содержащий код
# проекта с реализацией задания.

#Создаём класс Store с атрибутами
# name - название магазина, address - адрес магазина, items -  название товара, prices - цена
class Store:
    def __init__(self, name, address):
        self.name = name
        self.address = address
        self.items = {}
        self.prices = {}

    #Метод для добавления товара и его цену
    def add_item(self, item_name, item_price):
        self.items[item_name] = True
        self.prices[item_name] = item_price

    # Метод для удаления товара и его цены. Если товар отсутствует будет вывод ошибки
    def remove_item(self, item_name):
        if item_name in self.items:
            del self.items[item_name]
            del self.prices[item_name]
            print(f'Товар "{item_name}" удален из ассортимента.')
        else:
            print(f'Товар "{item_name}" не найден в ассортименте.')

    # Метод для возвращения цены товара, если он существует в словаре
    def get_item_price(self, item_name):
        return self.prices.get(item_name)

    # Метод для обновления цены
    def update_item_price(self, item_name, new_price):
        if item_name in self.prices:
            self.prices[item_name] = new_price
            print(f'Цена товара "{item_name}" обновлена на {new_price} руб.')
        else:
            print(f'Товар "{item_name}" не найден в ассортименте.')

    # Метод для отображения всех товаров в магазине и их цен
    def list_items(self):
        print(f'Товары в магазине {self.name}:')
        for item_name, item_price in self.prices.items():
            print(f'{item_name} - Цена: {item_price} руб.')
        print('-' * 40)  # Разделитель


# Создаем магазины на примере сети магазинов X5 Retail Group
store1 = Store('Перекресток', 'Россия, г. Пенза, Улица Пушкина, дом 2')
store2 = Store('Чижик', 'Россия, г. Москва, Улица Ленина, дом 5')
store3 = Store('Пятерочка', 'Россия, г. Санкт-Петербург, Улица Мира, дом 10')

# Добавляем новые товары в магазин Перекресток
store1.add_item('груши', 120.99)
store1.add_item('яблоки', 90.5)
store1.add_item('апельсины', 160.99)
store1.add_item('бананы', 200.5)

# Выводим список товаров в магазине Перекресток
store1.list_items()

# Удаляем товар "яблоки" из магазина Перекресток
store1.remove_item('яблоки')

# Получаем цену товара "апельсины" из магазина Перекресток
print(f'Цена апельсинов: {store1.get_item_price("апельсины")}')

# Обновляем цену товара "груши" в магазине Перекресток
store1.update_item_price('груши', 130.0)

# Повторный вывод списка товаров в магазине Перекресток
store1.list_items()

print('=' * 40)  # Разделитель между магазинами

# Добавляем новые товары в магазин Чижик
store2.add_item('молоко', 60.0)
store2.add_item('хлеб', 35.0)

# Выводим список товаров в магазине Чижик
store2.list_items()

# Удаляем товар "хлеб" из магазина Чижик
store2.remove_item('хлеб')

# Получаем цену товара "молоко" из магазина Чижик
print(f'Цена молока: {store2.get_item_price("молоко")}')

# Обновляем цену товара "молоко" в магазине Чижик
store2.update_item_price('молоко', 65.0)

# Повторный вывод списка товаров в магазине Чижик
store2.list_items()

print('=' * 40)  # Разделитель между магазинами

# Добавляем новые товары в магазин Пятерочка
store3.add_item('яйца', 90.0)
store3.add_item('сыр', 250.0)

# Выводим список товаров в магазине Пятерочка
store3.list_items()

# Удаляем товар "яйца" из магазина Пятерочка
store3.remove_item('яйца')

# Получаем цену товара "сыр" из магазина Пятерочка
print(f'Цена сыра: {store3.get_item_price("сыр")}')

# Обновляем цену товара "сыр" в магазине Пятерочка
store3.update_item_price('сыр', 260.0)

# Повторный вывод списка товаров в магазине Пятерочка
store3.list_items()

print('=' * 40)  # Разделитель между магазинами
